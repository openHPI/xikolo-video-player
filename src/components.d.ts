/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Status,
} from './utils/status';
import {
  TextTrack,
} from './utils/webVTT';

export namespace Components {
  interface XmAspectRatioBox {
    'ratio': number;
  }
  interface XmControls {
    'status': Status;
    'textTrack': TextTrack;
  }
  interface XmPlayer {
    'disableTextTrack': () => Promise<void>;
    'enableTextTrack': () => Promise<void>;
    'lang': string;
    'mute': () => Promise<void>;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'seek': (seconds: number) => Promise<void>;
    'unmute': () => Promise<void>;
    'volume': number;
  }
  interface XmScreen {
    'pip': boolean;
  }
  interface XmSettingsMenu {
    'isOpen': boolean;
    'status': Status;
    'textTrack': TextTrack;
  }
  interface XmTextTrack {
    'label': string;
    'language': string;
    'src': string;
  }
  interface XmVideo {
    'currentTime': () => Promise<number>;
    'getAspectRatio': () => Promise<number>;
    'getDimensions': () => Promise<{ width: number; height: number; }>;
    'getDuration': () => Promise<number>;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'seek': (seconds: number) => Promise<number>;
    'setPlaybackRate': (playbackRate: number) => Promise<number>;
    /**
    * Vimeo Video ID
    */
    'src': number;
    'volume': number;
  }
}

declare global {


  interface HTMLXmAspectRatioBoxElement extends Components.XmAspectRatioBox, HTMLStencilElement {}
  var HTMLXmAspectRatioBoxElement: {
    prototype: HTMLXmAspectRatioBoxElement;
    new (): HTMLXmAspectRatioBoxElement;
  };

  interface HTMLXmControlsElement extends Components.XmControls, HTMLStencilElement {}
  var HTMLXmControlsElement: {
    prototype: HTMLXmControlsElement;
    new (): HTMLXmControlsElement;
  };

  interface HTMLXmPlayerElement extends Components.XmPlayer, HTMLStencilElement {}
  var HTMLXmPlayerElement: {
    prototype: HTMLXmPlayerElement;
    new (): HTMLXmPlayerElement;
  };

  interface HTMLXmScreenElement extends Components.XmScreen, HTMLStencilElement {}
  var HTMLXmScreenElement: {
    prototype: HTMLXmScreenElement;
    new (): HTMLXmScreenElement;
  };

  interface HTMLXmSettingsMenuElement extends Components.XmSettingsMenu, HTMLStencilElement {}
  var HTMLXmSettingsMenuElement: {
    prototype: HTMLXmSettingsMenuElement;
    new (): HTMLXmSettingsMenuElement;
  };

  interface HTMLXmTextTrackElement extends Components.XmTextTrack, HTMLStencilElement {}
  var HTMLXmTextTrackElement: {
    prototype: HTMLXmTextTrackElement;
    new (): HTMLXmTextTrackElement;
  };

  interface HTMLXmVideoElement extends Components.XmVideo, HTMLStencilElement {}
  var HTMLXmVideoElement: {
    prototype: HTMLXmVideoElement;
    new (): HTMLXmVideoElement;
  };
  interface HTMLElementTagNameMap {
    'xm-aspect-ratio-box': HTMLXmAspectRatioBoxElement;
    'xm-controls': HTMLXmControlsElement;
    'xm-player': HTMLXmPlayerElement;
    'xm-screen': HTMLXmScreenElement;
    'xm-settings-menu': HTMLXmSettingsMenuElement;
    'xm-text-track': HTMLXmTextTrackElement;
    'xm-video': HTMLXmVideoElement;
  }
}

declare namespace LocalJSX {
  interface XmAspectRatioBox {
    'ratio'?: number;
  }
  interface XmControls {
    'onControl:changeVolume'?: (event: CustomEvent<any>) => void;
    'onControl:disableTextTrack'?: (event: CustomEvent<any>) => void;
    'onControl:enableTextTrack'?: (event: CustomEvent<any>) => void;
    'onControl:enterFullscreen'?: (event: CustomEvent<any>) => void;
    'onControl:exitFullscreen'?: (event: CustomEvent<any>) => void;
    'onControl:mute'?: (event: CustomEvent<any>) => void;
    'onControl:pause'?: (event: CustomEvent<any>) => void;
    'onControl:play'?: (event: CustomEvent<any>) => void;
    'onControl:seek'?: (event: CustomEvent<any>) => void;
    'onControl:unmute'?: (event: CustomEvent<any>) => void;
    'status'?: Status;
    'textTrack'?: TextTrack;
  }
  interface XmPlayer {
    'lang'?: string;
    'volume'?: number;
  }
  interface XmScreen {
    'pip'?: boolean;
  }
  interface XmSettingsMenu {
    'isOpen'?: boolean;
    'onSetting:changePlaybackRate'?: (event: CustomEvent<any>) => void;
    'onSetting:changeTextTrack'?: (event: CustomEvent<any>) => void;
    'status'?: Status;
    'textTrack'?: TextTrack;
  }
  interface XmTextTrack {
    'label'?: string;
    'language'?: string;
    'onTexttrack:loaded'?: (event: CustomEvent<any>) => void;
    'src'?: string;
  }
  interface XmVideo {
    'onBuffered'?: (event: CustomEvent<any>) => void;
    'onBuffering'?: (event: CustomEvent<any>) => void;
    'onEnded'?: (event: CustomEvent<any>) => void;
    'onPause'?: (event: CustomEvent<any>) => void;
    'onPlay'?: (event: CustomEvent<any>) => void;
    'onProgress'?: (event: CustomEvent<any>) => void;
    'onSeeked'?: (event: CustomEvent<any>) => void;
    'onSeeking'?: (event: CustomEvent<any>) => void;
    'onTimeupdate'?: (event: CustomEvent<any>) => void;
    /**
    * Vimeo Video ID
    */
    'src'?: number;
    'volume'?: number;
  }

  interface IntrinsicElements {
    'xm-aspect-ratio-box': XmAspectRatioBox;
    'xm-controls': XmControls;
    'xm-player': XmPlayer;
    'xm-screen': XmScreen;
    'xm-settings-menu': XmSettingsMenu;
    'xm-text-track': XmTextTrack;
    'xm-video': XmVideo;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'xm-aspect-ratio-box': LocalJSX.XmAspectRatioBox & JSXBase.HTMLAttributes<HTMLXmAspectRatioBoxElement>;
      'xm-controls': LocalJSX.XmControls & JSXBase.HTMLAttributes<HTMLXmControlsElement>;
      'xm-player': LocalJSX.XmPlayer & JSXBase.HTMLAttributes<HTMLXmPlayerElement>;
      'xm-screen': LocalJSX.XmScreen & JSXBase.HTMLAttributes<HTMLXmScreenElement>;
      'xm-settings-menu': LocalJSX.XmSettingsMenu & JSXBase.HTMLAttributes<HTMLXmSettingsMenuElement>;
      'xm-text-track': LocalJSX.XmTextTrack & JSXBase.HTMLAttributes<HTMLXmTextTrackElement>;
      'xm-video': LocalJSX.XmVideo & JSXBase.HTMLAttributes<HTMLXmVideoElement>;
    }
  }
}


