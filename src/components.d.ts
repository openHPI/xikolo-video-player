/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Status,
} from './utils/status';

export namespace Components {
  interface XmAspectRatioBox {
    'ratio': number;
  }
  interface XmControls {
    'status': Status;
  }
  interface XmPlayer {
    'mute': () => Promise<void>;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'seek': (seconds: number) => Promise<void>;
    'unmute': () => Promise<void>;
    'volume': number;
  }
  interface XmScreen {
    'pip': boolean;
  }
  interface XmVideo {
    'currentTime': () => Promise<number>;
    'getAspectRatio': () => Promise<number>;
    'getDimensions': () => Promise<{ width: number; height: number; }>;
    'getDuration': () => Promise<number>;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'seek': (seconds: number) => Promise<number>;
    /**
    * Vimeo Video ID
    */
    'src': number;
    'volume': number;
  }
}

declare global {


  interface HTMLXmAspectRatioBoxElement extends Components.XmAspectRatioBox, HTMLStencilElement {}
  var HTMLXmAspectRatioBoxElement: {
    prototype: HTMLXmAspectRatioBoxElement;
    new (): HTMLXmAspectRatioBoxElement;
  };

  interface HTMLXmControlsElement extends Components.XmControls, HTMLStencilElement {}
  var HTMLXmControlsElement: {
    prototype: HTMLXmControlsElement;
    new (): HTMLXmControlsElement;
  };

  interface HTMLXmPlayerElement extends Components.XmPlayer, HTMLStencilElement {}
  var HTMLXmPlayerElement: {
    prototype: HTMLXmPlayerElement;
    new (): HTMLXmPlayerElement;
  };

  interface HTMLXmScreenElement extends Components.XmScreen, HTMLStencilElement {}
  var HTMLXmScreenElement: {
    prototype: HTMLXmScreenElement;
    new (): HTMLXmScreenElement;
  };

  interface HTMLXmVideoElement extends Components.XmVideo, HTMLStencilElement {}
  var HTMLXmVideoElement: {
    prototype: HTMLXmVideoElement;
    new (): HTMLXmVideoElement;
  };
  interface HTMLElementTagNameMap {
    'xm-aspect-ratio-box': HTMLXmAspectRatioBoxElement;
    'xm-controls': HTMLXmControlsElement;
    'xm-player': HTMLXmPlayerElement;
    'xm-screen': HTMLXmScreenElement;
    'xm-video': HTMLXmVideoElement;
  }
}

declare namespace LocalJSX {
  interface XmAspectRatioBox extends JSXBase.HTMLAttributes<HTMLXmAspectRatioBoxElement> {
    'ratio'?: number;
  }
  interface XmControls extends JSXBase.HTMLAttributes<HTMLXmControlsElement> {
    'onControl:changeVolume'?: (event: CustomEvent<any>) => void;
    'onControl:enterFullscreen'?: (event: CustomEvent<any>) => void;
    'onControl:exitFullscreen'?: (event: CustomEvent<any>) => void;
    'onControl:mute'?: (event: CustomEvent<any>) => void;
    'onControl:pause'?: (event: CustomEvent<any>) => void;
    'onControl:play'?: (event: CustomEvent<any>) => void;
    'onControl:seek'?: (event: CustomEvent<any>) => void;
    'onControl:unmute'?: (event: CustomEvent<any>) => void;
    'status'?: Status;
  }
  interface XmPlayer extends JSXBase.HTMLAttributes<HTMLXmPlayerElement> {
    'volume'?: number;
  }
  interface XmScreen extends JSXBase.HTMLAttributes<HTMLXmScreenElement> {
    'pip'?: boolean;
  }
  interface XmVideo extends JSXBase.HTMLAttributes<HTMLXmVideoElement> {
    'onBuffered'?: (event: CustomEvent<any>) => void;
    'onBuffering'?: (event: CustomEvent<any>) => void;
    'onEnded'?: (event: CustomEvent<any>) => void;
    'onPause'?: (event: CustomEvent<any>) => void;
    'onPlay'?: (event: CustomEvent<any>) => void;
    'onProgress'?: (event: CustomEvent<any>) => void;
    'onSeeked'?: (event: CustomEvent<any>) => void;
    'onSeeking'?: (event: CustomEvent<any>) => void;
    'onTimeupdate'?: (event: CustomEvent<any>) => void;
    /**
    * Vimeo Video ID
    */
    'src'?: number;
    'volume'?: number;
  }

  interface IntrinsicElements {
    'xm-aspect-ratio-box': XmAspectRatioBox;
    'xm-controls': XmControls;
    'xm-player': XmPlayer;
    'xm-screen': XmScreen;
    'xm-video': XmVideo;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


